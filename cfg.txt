Terminal:
True False variable class is return None continue pass break for def from import while and or not with as if elif else range print open in raise space string number newline + - * / = ( ) > < % : ' " , .
Variable:
S VAR VAROPS FORLOOP RANGE WHILELOOP EXPRESSION IMPORT RETURN WITH DEF FUNCTION PRINT INBRACKET OPERATOR OPERATORBOOL OPERATORCOMPARISON BOOL IF ELIF ELSE INBRACKET STRING CLASS METHOD COMMENT INPUTFUNC RAISE
Rules:
S -> S newline S | VAR = VAROPS | VAR + = VAROPS | VAR - = VAROPS | VAR * = VAROPS | VAR / = VAROPS | VAR % = VAROPS | FORLOOP | WHILELOOP | IF | ELIF | ELSE | IMPORT | WITH | DEF | FUNCTION | PRINT | COMMENT | RAISE
VAR -> variable
OPERATOR -> + | - | * | / | * * | / / | %
OPERATORBOOL -> and | or
OPERATORCOMPARISON -> < | > | < = | > = | = =
VAROPS -> variable | number | FUNCTION | VAROPS OPERATOR VAROPS
INBRACKET -> ( INBRACKET ) | ( VAROPS )
RANGE -> range INBRACKET
FORLOOP -> for VAR in RANGE | for VAR in VAR
BOOL -> True | False
EXPRESSION -> BOOL | VAROPS OPERATORCOMPARISON VAROPS | VAR OPERATORBOOL VAR
WHILELOOP -> while EXPRESSION :
IMPORT -> from VAR import VAR as VAR | from VAR import * | import VAR as VAR
RETURN -> return EXPRESSION | return VAROPS
STRING -> ' string ' | " string "
WITH -> with open INBRACKET as VAR
INPUTFUNC -> VAR | INPUTFUNC , INPUTFUNC
FUNCTION -> VAR ( ) | VAR ( INPUTFUNC )
DEF -> def FUNCTION :
PRINT -> print ( STRING )
IF -> if EXPRESSION :
ELIF -> elif EXPRESSION :
ELSE -> else :
CLASS -> class VAR :
METHOD -> VAR . FUNCTION
COMMENT -> ' ' ' string ' ' ' | " " " string " " "
RAISE -> raise INBRACKET