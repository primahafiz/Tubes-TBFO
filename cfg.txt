Terminal:
True False variable class is return None continue pass break for def from import while and or not with as if elif else range print open in raise string number newline comment + - * / = ( ) > < % : ' " , . # [ ]
Variable:
S VAR VARARR VAROPS FORLOOP RANGE WHILELOOP EXPRESSION IMPORT RETURN WITH DEF FUNCTION PRINT INBRACKET OPERATOR OPERATORBOOL OPERATORCOMPARISON BOOL IF ELIF ELSE INBRACKET STRING CLASS METHOD COMMENT INPUTFUNC RAISE NEWLINE INBRACKETEXPRESSION VARARR MERGEVAROPS MERGEEXPRESSION ONELINERIF CONTROLLOOP FORLOOPCONTROL DEFRETURN FORLOOPMULTICONTROL MULTICONTROLLOOP WHILELOOPCONTROL WHILELOOPMULTICONTROL DEFMULTIRETURN MULTIRETURN INDEXINGARR
Rules:
S -> S NEWLINE S | S NEWLINE | NEWLINE S | VAR = VAROPS | VAR + = VAROPS | VAR - = VAROPS | VAR * = VAROPS | VAR / = VAROPS | VAR % = VAROPS | VAR * * = VAROPS | FORLOOP | FORLOOPCONTROL | FORLOOPMULTICONTROL | WHILELOOP | WHILELOOPCONTROL | WHILELOOPMULTICONTROL | IF | ELIF | ELSE | IMPORT | WITH | DEF | DEFRETURN | DEFMULTIRETURN | FUNCTION | METHOD | PRINT | COMMENT | RAISE | ONELINERIF
VAR -> variable
VARARR -> variable [ INDEXINGARR ] | VARARR [ INDEXINGARR ]
NEWLINE -> NEWLINE newline | newline
BOOL -> True | False | not BOOL
OPERATOR -> + | - | * | / | * * | / / | %
OPERATORBOOL -> and | or
OPERATORCOMPARISON -> < | > | < = | > = | = = | is | in | not in | is not
VAROPS -> VAR | VARARR | number | STRING | BOOL | FUNCTION | METHOD | VAROPS OPERATOR VAROPS | MERGEEXPRESSION
INBRACKET -> ( INBRACKET ) | ( VAROPS )
MERGEVAROPS -> VAROPS | INBRACKET
RANGE -> range INBRACKET
FORLOOP -> for VAR in RANGE : | for VAR in VAR :
FORLOOPCONTROL -> FORLOOP S CONTROLLOOP | FORLOOP S CONTROLLOOP | FORLOOP NEWLINE CONTROLLOOP | FORLOOP NEWLINE CONTROLLOOP
FORLOOPMULTICONTROL -> FORLOOP MULTICONTROLLOOP
EXPRESSION -> BOOL | VAR | VARARR | VAROPS OPERATORCOMPARISON VAROPS | VAROPS OPERATORBOOL VAROPS | not EXPRESSION
INBRACKETEXPRESSION -> ( EXPRESSION ) | ( INBRACKETEXPRESSION ) | not INBRACKETEXPRESSION
MERGEEXPRESSION -> EXPRESSION | INBRACKETEXPRESSION
WHILELOOP -> while MERGEEXPRESSION :
WHILELOOPCONTROL -> WHILELOOP S CONTROLLOOP | WHILELOOP S CONTROLLOOP | WHILELOOP NEWLINE CONTROLLOOP | WHILELOOP NEWLINE CONTROLLOOP
WHILELOOPMULTICONTROL -> WHILELOOP MULTICONTROLLOOP
IMPORT -> from VAR import VAR | from VAR import VAR as VAR | from VAR import * | from . VAR import VAR | from . VAR import VAR as VAR | from . VAR import * | import VAR as VAR | import VAR
RETURN -> return MERGEVAROPS | return MERGEEXPRESSION | return
STRING -> string | STRING string
WITH -> with open INBRACKET as VAR
INPUTFUNC -> VAROPS | INPUTFUNC , INPUTFUNC
FUNCTION -> VAR ( ) | VAR ( INPUTFUNC )
DEF -> def FUNCTION :
DEFRETURN -> DEF S RETURN | DEF NEWLINE RETURN
DEFMULTIRETURN -> DEF MULTIRETURN
PRINT -> print INBRACKET
IF -> if INBRACKETEXPRESSION : | if EXPRESSION :
ELIF -> elif INBRACKETEXPRESSION : | elif EXPRESSION :
ELSE -> else :
ONELINERIF -> VAR = VAROPS if MERGEEXPRESSION else VAROPS
CLASS -> class VAR :
METHOD -> VAR . FUNCTION
COMMENT -> comment
RAISE -> raise INBRACKET
CONTROLLOOP -> pass | break | continue
MULTICONTROLLOOP -> S CONTROLLOOP | CONTROLLOOP | MULTICONTROLLOOP NEWLINE MULTICONTROLLOOP
MULTIRETURN -> S RETURN | RETURN | MULTIRETURN NEWLINE MULTIRETURN
INDEXINGARR -> : | VAROPS : VAROPS | VAROPS : | : VAROPS | VAROPS