Terminal:
True False variable class is return None continue pass break for def from import while and or not with as if elif else range print open in raise space string number newline + - * / = ( ) > < % : ' " , . # [ ]
Variable:
S VAR VARARR VAROPS FORLOOP RANGE WHILELOOP EXPRESSION IMPORT RETURN WITH DEF FUNCTION PRINT INBRACKET OPERATOR OPERATORBOOL OPERATORCOMPARISON BOOL IF ELIF ELSE INBRACKET STRING CLASS METHOD COMMENT INPUTFUNC RAISE NEWLINE INBRACKETEXPRESSION VARARR MERGEVAROPS MERGEEXPRESSION ONELINERIF CONTROLLOOP
Rules:
S -> S NEWLINE S | S NEWLINE | NEWLINE S | VAR = VAROPS | VAR + = VAROPS | VAR - = VAROPS | VAR * = VAROPS | VAR / = VAROPS | VAR % = VAROPS | VAR * * = VAROPS | FORLOOP | WHILELOOP | IF | ELIF | ELSE | IMPORT | WITH | DEF | FUNCTION | PRINT | COMMENT | RAISE | ONELINERIF
VAR -> variable
VARARR -> variable [ VAROPS ] | variable [ VAROPS ] | VARARR [ VAROPS ] | VARARR [ VAROPS ]
NEWLINE -> NEWLINE newline | newline
BOOL -> True | False | not BOOL
OPERATOR -> + | - | * | / | * * | / / | %
OPERATORBOOL -> and | or
OPERATORCOMPARISON -> < | > | < = | > = | = = | is | in | not in | is not
VAROPS -> VAR | VARARR | number | string | BOOL | FUNCTION | METHOD | VAROPS OPERATOR VAROPS | MERGEEXPRESSION
INBRACKET -> ( INBRACKET ) | ( VAROPS )
MERGEVAROPS -> VAROPS | INBRACKET
RANGE -> range INBRACKET
FORLOOP -> for VAR in RANGE : | for VAR in VAR : | FORLOOP S CONTROLLOOP | FORLOOP S CONTROLLOOP | FORLOOP NEWLINE CONTROLLOOP | FORLOOP NEWLINE CONTROLLOOP
EXPRESSION -> BOOL | VAR | VARARR | VAROPS OPERATORCOMPARISON VAROPS | VAROPS OPERATORBOOL VAROPS | not EXPRESSION
INBRACKETEXPRESSION -> ( EXPRESSION ) | ( INBRACKETEXPRESSION ) | not INBRACKETEXPRESSION
MERGEEXPRESSION -> EXPRESSION | INBRACKETEXPRESSION
WHILELOOP -> while MERGEEXPRESSION : | while MERGEEXPRESSION : S CONTROLLOOP | while MERGEEXPRESSION : CONTROLLOOP
IMPORT -> from VAR import VAR as VAR | from VAR import * | import VAR as VAR
RETURN -> return MERGEVAROPS | return MERGEEXPRESSION | return
STRING -> ' string ' | " string " | STRING + STRING | string
WITH -> with open INBRACKET as VAR
INPUTFUNC -> VAROPS | INPUTFUNC , INPUTFUNC
FUNCTION -> VAR ( ) | VAR ( INPUTFUNC )
DEF -> def VAR : | def FUNCTION : | DEF S RETURN | DEF S RETURN | DEF newline RETURN | DEF newline RETURN
PRINT -> print INBRACKET
IF -> if INBRACKETEXPRESSION : | if EXPRESSION :
ELIF -> elif INBRACKETEXPRESSION : | elif EXPRESSION :
ELSE -> else :
ONELINERIF -> VAR = VAROPS if MERGEEXPRESSION else VAROPS
CLASS -> class VAR :
METHOD -> VAR . FUNCTION
COMMENT -> ' ' ' string ' ' ' | " " " string " " " | # string
RAISE -> raise INBRACKET
CONTROLLOOP -> pass | break | continue